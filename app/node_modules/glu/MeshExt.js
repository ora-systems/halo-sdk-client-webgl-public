var Mesh = require('pex-glu').Mesh;

Mesh.prototype.drawInstancesOpt = function(camera, instances) {
  if (this.geometry.isDirty()) {
    this.geometry.compile();
  }
  if (camera) {
    this.updateMatrices(camera);
    this.updateMatricesUniforms(this.material);
  }
  this.material.use();
  this.bindAttribs();
  if (this.geometry.faces && this.geometry.faces.length > 0 && this.primitiveType !== this.gl.LINES && this.primitiveType !== this.gl.POINTS) {
    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.geometry.faces.buffer.handle);
    if (camera && instances.length > 0) {
      this.updateMatrices(camera);
      this.updateMatricesUniforms(this.material);
      this.updateUniforms(this.material, instances[0]);
      this.material.use();
    }
    for (var i = 0; i < instances.length; i++) {
      var instance = instances[i];
      if (camera && instance.uniforms) {
        for (uniformName in instance.uniforms) {
          var uniformValue = instance.uniforms[uniformName];
          if (this.material.program.uniforms[uniformName]) {
            this.material.program.uniforms[uniformName](uniformValue);
          }
        }
        //this.updateMatrices(camera, instance);
        //this.updateMatricesUniforms(this.material);
        //this.updateUniforms(this.material, instance);
        //this.material.use();
      }
      this.gl.drawElements(this.primitiveType, this.geometry.faces.buffer.dataBuf.length, this.gl.UNSIGNED_SHORT, 0);
    }
  }
  else if (this.geometry.edges && this.geometry.edges.length > 0 && this.primitiveType === this.gl.LINES) {
    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.geometry.edges.buffer.handle);
    if (camera && instances.length > 0) {
      this.updateMatrices(camera);
      this.updateMatricesUniforms(this.material);
      this.updateUniforms(this.material, instances[0]);
      this.material.use();
    }
    for (var i = 0; i < instances.length; i++) {
      var instance = instances[i];
      if (camera && instance.uniforms) {
        for (uniformName in instance.uniforms) {
          var uniformValue = instance.uniforms[uniformName];
          if (this.material.program.uniforms[uniformName]) {
            this.material.program.uniforms[uniformName](uniformValue);
          }
        }
        //this.updateMatrices(camera, instance);
        //this.updateMatricesUniforms(this.material);
        //this.updateUniforms(this.material, instance);
        //this.material.use();
      }
      this.gl.drawElements(this.primitiveType, this.geometry.edges.buffer.dataBuf.length, this.gl.UNSIGNED_SHORT, 0);
    }
  }
  //return this.unbindAttribs();
};