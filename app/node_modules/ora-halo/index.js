var Mesh        = require('pex-glu').Mesh;
var Geometry    = require('pex-geom').Geometry;
var Vec3        = require('pex-geom').Vec3;
var Vec2        = require('pex-geom').Vec2;
var Texture2D   = require('pex-glu').Texture2D;
var makeCircle  = require('make-circle');
var HaloRingMaterial = require('ora-halo-ring-material');
var remap       = require('re-map');
var floor       = Math.floor;
var Time        = require('pex-sys').Time;
var glu         = require('pex-glu');

function Halo(opts) {
  this.minRingRadius = 0.2;
  this.maxRingRadius = 1.0;
  this.minNumRings = 1;
  this.maxNumRings = 50;
  this.size = 0.7;

  this.instanceVariables = ['color', 'complexity'];

  this.ringInstances = [];
  this.ringMesh = this.buildMesh(opts);
}

Halo.prototype.buildMesh = function(opts) {
  var points    = makeCircle(1, 128, 'x', 'z', true);
  var texCoords = points.map(function(v, i) { return new Vec2(i/(points.length-1), 0)});
  var edges     = points.map(function(v, i) { return [ i, (i+1) % points.length ]});
  edges.pop(); //drop last edge as the last point is duplicated of the first one's position'

  var g = new Geometry({ vertices: points, texCoords: texCoords, edges: edges,  });
  var lineDotsTexture = this.lineDotsTexture = Texture2D.load(opts.lineDotsTexture, { repeat: true, mipmap: true });
  var lineSolidTexture = this.lineSolidTexture = Texture2D.load(opts.lineSolidTexture, { repeat: true, mipmap: true });
  var colorTexture = this.colorTexture = Texture2D.load(opts.colorTexture, { repeat: false, mipmap: true });
  var mat = new HaloRingMaterial({ lineTexture: lineDotsTexture, colorTexture: colorTexture } );
  var mesh = new Mesh(g, mat, { lines: true });
  return mesh;
}

Halo.prototype.setNumRings = function(n) {
}

Halo.prototype.setGlobalParam = function(param, value) {
  if (this.instanceVariables.indexOf(param) !== -1) {
    this.ringInstances.forEach(function(ring) {
      ring.uniformsTargets[param] = value;
    })
  }
}

Halo.prototype.update = function() {
  var numRings = floor(remap(this.size, 0, 1, this.minNumRings, this.maxNumRings));
  if (this.ringInstances.length > numRings) {
    //crop the excess of rings
    this.ringInstances.length = numRings;
  }
  while(this.ringInstances.length < numRings) {
    this.ringInstances.push({
      uniforms: {
        radius: 0,
        color: 0,
        complexity: 0
      },
      uniformsTargets: {
        radius: 1,
        color: 0,
        complexity: 0
      },
    })
  }

  for(var i=0; i<numRings; i++) {
    var ring = this.ringInstances[i];
    var k = remap(i, 0, numRings, 0, 1);
    ring.uniformsTargets.radius = remap(k*k, 0, 1, this.minRingRadius, this.maxRingRadius);
    ring.uniforms.radiusHeightScale = remap(i, 0, numRings, 0, 1);

    ring.uniforms.radius += (ring.uniformsTargets.radius - ring.uniforms.radius) * 0.05;
    ring.uniforms.color += (ring.uniformsTargets.color - ring.uniforms.color) * 0.05;
    ring.uniforms.complexity += (ring.uniformsTargets.complexity - ring.uniforms.complexity) * 0.05;
  }

  this.ringMesh.material.uniforms.time = Time.seconds;
}

Halo.prototype.setColorTexture = function(path) {
  this.colorTexture.dispose();
  this.colorTexture = Texture2D.load(path);
  this.ringMesh.material.uniforms.colorTexture = this.colorTexture;
}

Halo.prototype.draw = function(camera) {
  glu.enableAdditiveBlending(true);
  glu.enableDepthReadAndWrite(false, false);
  this.ringMesh.material.uniforms.lineTexture = this.lineDotsTexture;
  this.ringMesh.drawInstances(camera, this.ringInstances);
}

Halo.prototype.drawSolid = function(camera) {
  glu.enableAdditiveBlending(true);
  glu.enableDepthReadAndWrite(false, false);
  this.ringMesh.material.uniforms.lineTexture = this.lineSolidTexture;
  this.ringMesh.drawInstances(camera, this.ringInstances);
}


Halo.prototype.dispose = function() {
  this.mesh.material.dispose();
  this.mesh.dispose();
}

module.exports = Halo;