var isBrowser = require('is-browser');
var plask = isBrowser ? {} : require('plask');
var interpolateArrays = require('interpolate-arrays');

function fromHex(hex) {
    hex = hex.replace(/^#/, "");
    var num = parseInt(hex, 16);

    var color = [0,0,0,0];

    color[0] = (num >> 16 & 255) / 255;
    color[1] = (num >> 8 & 255) / 255;
    color[2] = (num & 255) / 255;
    color[3] = 1

    return color;
}

function series(n) {
    var result = [];
    for(var i=0; i<n; i++) {
        result.push(i);
    }
    return result;
}

function colorGradient(colors, numSteps) {
    return series(numSteps).map(function(i) {
        return interpolateArrays(colors, i/numSteps);
    })
}

function createGradientBrowser(colors, w, h) {
    var gradient = colorGradient(colors, w);

    var canvas = document.createElement('canvas');
    canvas.width = w;
    canvas.height = h;

    var ctx = canvas.getContext('2d');

    gradient.forEach(function(color, i) {
        var r = (color[0] * 255) | 0;
        var g = (color[1] * 255) | 0;
        var b = (color[2] * 255) | 0;
        ctx.fillStyle = 'rgb('+r+','+g+','+b+')';
        ctx.fillRect(i, 0, 1, h);
    })

    return canvas;
}

function createGradientSkia(colors, w, h) {
    var gradient = colorGradient(colors, w);

    var canvas = plask.SkCanvas.create(w, h);
    var paint = new plask.SkPaint();
    gradient.forEach(function(color, i) {
        paint.setColor((color[0] * 255) | 0, (color[1] * 255) | 0, (color[2] * 255) | 0, 255);
        canvas.drawRect(paint, i, 0, i+1, h);
    })

    return canvas;
}

function createGradient(colors, w, h) {
    if (typeof(colors[0]) == 'string') {
        colors = colors.map(fromHex);
    }
    if (isBrowser) {
        return createGradientBrowser(colors, w, h);
    }
    else {
        return createGradientSkia(colors, w, h);
    }
}

module.exports = createGradient;
