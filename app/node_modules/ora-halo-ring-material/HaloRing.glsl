#ifdef VERT

uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;

uniform float radius;
uniform float radiusHeightScale;
uniform float time;

attribute vec3 position;
attribute vec2 texCoord;

varying vec2 vTexCoord;

#pragma glslify: cnoise3 = require(glsl-noise/classic/3d)

void main() {
  vec3 pos = position.xyz * radius;
  float noiseScale = 3.0;
  pos.y += radiusHeightScale * 0.3 * cnoise3(pos * noiseScale + vec3(time, 0.0, 0.0));
  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
  vTexCoord = texCoord;
}

#endif

#ifdef FRAG

uniform sampler2D lineTexture;
uniform sampler2D colorTexture;
uniform float radiusHeightScale;

uniform float radius;
uniform float color;

varying vec2 vTexCoord;

void main() {
  vec2 lineTextureScale = vec2(floor(150.0 * radius), 1.0);
  vec4 linePattern = texture2D(lineTexture, vTexCoord * lineTextureScale);
  vec4 lineColor  = texture2D(colorTexture, vec2(color, 0.5));
  gl_FragColor = linePattern * lineColor;
}

#endif
