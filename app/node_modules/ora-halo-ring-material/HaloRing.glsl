float remap(float v, float oldmin, float oldmax, float newmin, float newmax) {
  return newmin + (v - oldmin)/(oldmax - oldmin)*(newmax - newmin);
}

#ifdef VERT

uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;

uniform float radius;
uniform float radiusHeightScale;
uniform float radiusHeightLocalScale;
uniform float complexity;
uniform float time;
uniform float speed;
uniform float wobble;
uniform float wobbleFrequency;

attribute vec3 position;
attribute vec2 texCoord;

varying vec2 vTexCoord;

const float PI = 3.14159265359;

#pragma glslify: cnoise3 = require(glsl-noise/classic/3d)

void main() {
  vec3 pos = position.xyz * radius;
  float noiseScale = remap(complexity, 0.0, 1.0, 1.0, 10.0);
  pos.y += radiusHeightScale * 0.3 * cnoise3(pos * noiseScale + vec3(speed * time, 0.0, 0.0));

  float wobbleNoise = wobble * cnoise3(vec3(pos.x, 0.0, pos.z)  + vec3(speed * time, 0.0, 0.0));
  pos.x += radiusHeightLocalScale * wobble * ( wobbleNoise ) * cos(texCoord.x * PI * 2.0);
  pos.z += radiusHeightLocalScale * wobble * ( wobbleNoise ) * sin(texCoord.x * PI * 2.0);

  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
  vTexCoord = texCoord;
}

#endif

#ifdef FRAG

uniform sampler2D lineTexture;
uniform sampler2D colorTexture;
uniform float radiusHeightScale;

uniform float radius;
uniform float color;
uniform float brightness;
uniform float alpha;

varying vec2 vTexCoord;

void main() {
  vec2 lineTextureScale = vec2(floor(150.0 * radius), 1.0);
  vec4 linePattern = texture2D(lineTexture, vTexCoord * lineTextureScale);
  vec4 lineColor  = texture2D(colorTexture, vec2(color, 0.5));

  gl_FragColor = linePattern * lineColor;

  gl_FragColor *= alpha * brightness;

  //debug
  //gl_FragColor = vec4(1.0, alpha, 0.0, 1.0);
}

#endif
