var Vec2               = require('pex-math/Vec2');
var Geometry           = require('pex-geom').Geometry;
var fs                 = require('fs');
var RenderableGeometry = require('pex-glu/lib/RenderableGeometry');
var merge              = require('merge');

function FullScreenQuad() {
  var vertices = [
    [-1, 1],
    [-1, -1],
    [1, -1],
    [1, 1])
  ];
  var texCoords = [
    [0, 1],
    [0, 0],
    [1, 0],
    [1, 1])
  ];
  var geometry = this.geometry = new Geometry({
    vertices: vertices,
    texCoords: texCoords,
    faces: true
  });
  // 0----3  0,1   1,1
  // | \  |      u
  // |  \ |      v
  // 1----2  0,0   0,1
  geometry.faces.push([0, 1, 2]);
  geometry.faces.push([0, 2, 3]);

  geometry = merge(geometry, RenderableGeometry);
  geometry.compile(); //build gl buffers
}

FullScreenQuad.prototype.draw = function(program) {
  var gl = Context.currentContext;

  //FIXME: cache it
  //gl.getAttribLocation(program.handle, attrib.name);
  gl.bindBuffer(gl.ARRAY_BUFFER, this.geometry.vertices.buffer.handle);
  gl.vertexAttribPointer(program.attributes.position, this.geometry.vertices.buffer.elementSize, gl.FLOAT, false, 0, 0);
  gl.enableVertexAttribArray(program.attributes.position);

  gl.bindBuffer(gl.ARRAY_BUFFER, this.geometry.texCoords.buffer.handle);
  gl.vertexAttribPointer(program.attributes.texCoord, this.geometry.texCoords.buffer.elementSize, gl.FLOAT, false, 0, 0);
  gl.enableVertexAttribArray(program.attributes.texCoord);

  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.geometry.faces.buffer.handle);
  gl.drawElements(gl.TRIANGLES, this.geometry.faces.buffer.dataBuf.length, gl.UNSIGNED_SHORT, 0);

  gl.disableVertexAttribArray(program.attributes.position);
  gl.disableVertexAttribArray(program.attributes.texCoord);
};

FullScreenQuad.prototype.dispose = function() {
  this.geometry.dispose();
}

module.exports = FullScreenQuad;
